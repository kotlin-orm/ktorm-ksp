/*
 * Copyright 2018-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.ktorm.ksp.api

import org.ktorm.schema.BaseTable
import java.sql.ResultSet
import kotlin.reflect.KClass

/**
 * Global ktorm-ksp configuration, you can add this annotation to any class, but only allow this
 * annotation to be added once.
 */
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.SOURCE)
public annotation class KtormKspConfig(

    /**
     * Allow entity creation using reflection in [BaseTable.doCreateEntity] (this property only affects tables
     * generated by class entity) By creating an entity class through reflection, the default value parameters in
     * the entity construction can take effect. When an entity construction parameter has a default value, and the
     * query result [ResultSet] does not have the parameter value or the value is null, The entity is instantiated
     * with parameter default values. This behavior has a slight performance penalty (although it can be ignored
     * in most cases), setting this property to false will not use reflection to create entities, This will result
     * in not being able to create instances with default value parameters
     */
    val allowReflectionCreateClassEntity: Boolean = true,

    /**
     * The global enum converter, the value can only be the implementation type of Nothing::class or singleton
     * [EnumConverter], the default conversion rules can be viewed in [Converter].
     */
    val enumConverter: KClass<out EnumConverter> = Nothing::class,

    /**
     * The global single type converter, the value can only be the implementation type of Nothing::class or
     * singleton [SingleTypeConverter], the default conversion rules can be viewed in [Converter].
     */
    val singleTypeConverters: Array<KClass<out SingleTypeConverter<*>>> = [],

    /**
     * Global naming strategy, the value can only be Nothing::class or the implementation type of [NamingStrategy]
     * of a singleton. By default, the table name is the entity class name, and the column name is the entity
     * class attribute name.
     */
    val namingStrategy: KClass<out NamingStrategy> = Nothing::class,

    /**
     * Default extension code generate configuration.
     */
    val extension: ExtensionGenerator = ExtensionGenerator()
)

/**
 * Default extension build configuration.
 */
@Retention(AnnotationRetention.SOURCE)
public annotation class ExtensionGenerator(

    /**
     * Generate EntitySequence Extension Property.
     * ```kotlin
     * val Database.employees: EntitySequence<Employee,Employees>
     *     get() = this.sequenceOf(Employees)
     * ```
     */
    val enableSequenceOf: Boolean = true,

    /**
     * Generate EntitySequence add Extension Function. Generated only for class entity.
     * ```kotlin
     * fun EntitySequence<Employee,Employees>.add(employee)
     * ```
     */
    val enableClassEntitySequenceAddFun: Boolean = true,

    /**
     * Generate EntitySequence update Extension Function. Generated only for class entity.
     * ```kotlin
     * fun EntitySequence<Employee,Employees>.update(employee)
     * ```
     */
    val enableClassEntitySequenceUpdateFun: Boolean = true
)
