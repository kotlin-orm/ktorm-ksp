/*
 *  Copyright 2018-2021 the original author or authors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.ktorm.ksp.compiler.test

import com.tschuchort.compiletesting.*
import org.assertj.core.api.Assertions.assertThat
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import org.ktorm.database.Database
import org.ktorm.ksp.compiler.KtormProcessorProvider
import org.ktorm.logging.ConsoleLogger
import org.ktorm.logging.LogLevel
import org.ktorm.schema.BaseTable
import org.ktorm.schema.Table
import java.io.File
import kotlin.reflect.full.createInstance
import kotlin.reflect.full.functions

public abstract class BaseTest {

    @Rule
    @JvmField
    public val temporaryFolder: TemporaryFolder = TemporaryFolder()

    protected fun createCompiler(vararg sourceFiles: SourceFile, useKsp: Boolean = true): KotlinCompilation {
        return KotlinCompilation().apply {
            workingDir = temporaryFolder.root
            sources = sourceFiles.toList()
            if (useKsp) {
                symbolProcessorProviders = listOf(KtormProcessorProvider())
            }
            inheritClassPath = true
            messageOutputStream = System.out
            kspIncremental = true
        }
    }

    /**
     * The first compilation uses ksp to generate code.
     * The second compilation verifies the code generated by ksp.
     */
    protected inline fun twiceCompile(
        vararg sourceFiles: SourceFile,
        sourceFileBlock: (String) -> Unit = {},
    ): Pair<KotlinCompilation.Result, KotlinCompilation.Result> {
        val compiler1 = createCompiler(*sourceFiles)
        val result1 = compiler1.compile()
        val result2 =
            createCompiler(*(compiler1.kspGeneratedSourceFiles + sourceFiles).toTypedArray(), useKsp = false).compile()
        compiler1.kspGeneratedFiles.forEach { sourceFileBlock(it.readText()) }
        return result1 to result2
    }

    protected fun compile(
        vararg sourceFiles: SourceFile,
        printKspGenerateFile: Boolean = false
    ): KotlinCompilation.Result {
        val compilation = createCompiler(*sourceFiles)
        val result = compilation.compile()
        if (printKspGenerateFile) {
            compilation.kspSourcesDir.walkTopDown()
                .filter { it.extension == "kt" }
                .forEach { println(it.readText()) }
        }
        return result
    }

    protected val KotlinCompilation.kspGeneratedSourceFiles: List<SourceFile>
        get() = kspSourcesDir.resolve("kotlin")
            .walk()
            .filter { it.isFile }
            .map { SourceFile.fromPath(it.absoluteFile) }
            .toList()


    protected val KotlinCompilation.kspGeneratedFiles: List<File>
        get() = kspSourcesDir.resolve("kotlin")
            .walk()
            .filter { it.isFile }
            .toList()

    protected fun KotlinCompilation.Result.getBaseTable(className: String): BaseTable<*> {
        val clazz = classLoader.loadClass(className)
        assertThat(clazz).isNotNull
        val table = clazz.kotlin.createInstance()
        assertThat(table).isInstanceOf(BaseTable::class.java)
        return table as BaseTable<*>
    }

    protected fun KotlinCompilation.Result.getTable(className: String): BaseTable<*> {
        val clazz = classLoader.loadClass(className)
        assertThat(clazz).isNotNull
        val table = clazz.kotlin.createInstance()
        assertThat(table).isInstanceOf(Table::class.java)
        return table as Table<*>
    }

    protected inline fun useDatabase(action: (Database) -> Unit) {
        Database.connect(
            url = "jdbc:h2:mem:ktorm;",
            driver = "org.h2.Driver",
            logger = ConsoleLogger(threshold = LogLevel.TRACE),
            alwaysQuoteIdentifiers = true
        ).apply {
            this.useConnection {
                it.createStatement().use { statement ->
                    val sql =
                        KtormKspTest::class.java.classLoader.getResourceAsStream("init-data.sql")!!.bufferedReader()
                            .readText()
                    statement.executeUpdate(sql)
                }
                action(this)
            }
        }
    }

    private fun Any.reflectionInvoke(methodName: String, vararg args: Any?): Any? {
        return this::class.functions.first { it.name == methodName }.call(this@reflectionInvoke, *args)
    }

    protected fun KotlinCompilation.Result.invokeBridge(methodName: String, vararg args: Any?): Any? {
        val bridgeClass = this.classLoader.loadClass("TestBridge")
        val bridge = bridgeClass.kotlin.objectInstance!!
        return bridge.reflectionInvoke(methodName, *args)
    }
}
